name: Deploy (Manual)

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID to retrieve PR information'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check if the Artifact exists
      - name: Check if PR Info Artifact exists
        id: check-artifact
        run: |
          # Check if the artifact exists by calling GitHub API
          artifact_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | \
            jq -r ".artifacts[] | select(.name == \"pr-info-${{ github.event.inputs.run_id }}\") | .id")

          # Save the artifact ID if exists
          if [ -n "$artifact_id" ]; then
            echo "Artifact found."
            echo "artifact_id=$artifact_id" >> $GITHUB_ENV
          else
            echo "Artifact not found."
            exit 1
          fi

      # Step 2: Download the Artifact if it exists
      - name: Download PR Info Artifact
        if: env.artifact_id != ''
        run: |
          echo "Downloading artifact..."
          curl -L -o pr-info-${{ github.event.inputs.run_id }}.zip -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ env.artifact_id }}/zip"

      # Step 3: Extract Artifact
      - name: Extract Artifact
        if: env.artifact_id != ''
        run: |
          echo "Extracting artifact..."
          unzip pr-info-${{ github.event.inputs.run_id }}.zip -d ./artifact

      # Step 4: Read PR Title from the text file
      - name: Read PR Title from Artifact
        run: |
          PR_TITLE=$(cat ./artifact/pr-title.txt)
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV

      # Step 5: Read PR Body from the text file
      - name: Read PR Body from Artifact
        run: |
          PR_BODY=$(cat ./artifact/pr-body.txt)
          echo "PR_BODY<<EOF" >> $GITHUB_ENV
          echo "$PR_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 6: ⚙️ Generate Release Notes based on PR info
      - name: ⚙️ PR 기반 릴리즈 노트 생성
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ github.run_id }}
          name: Release - ${{ github.run_id }}
          body: |
            # 🔥 릴리즈 노트
            ## ${{ env.PR_TITLE }}

            ${{ env.PR_BODY }}
          draft: false
          prerelease: false
          token: ${{ secrets.GH_TOKEN }}
